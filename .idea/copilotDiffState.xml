<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/apps/api/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/api/main.py" />
              <option name="originalContent" value="import httpx  &#10;from fastapi import FastAPI&#10;from dotenv import load_dotenv &#10;from fastapi.middleware.cors import CORSMiddleware &#10;import os &#10;load_dotenv()&#10;&#10;&#10;&#10;app = FastAPI() &#10;app.add_middleware(CORSMiddleware, allow_origins=[&quot;*&quot;], allow_credentials=True, allow_methods=[&quot;*&quot;], allow_headers=[&quot;*&quot;]) # nie do produkcji / wygodne w dev&#10;weather_api_key= os.getenv(&quot;WEATHER_API_KEY&quot;)&#10;ipify_api_url = &quot;https://api.ipify.org?format=json&quot;&#10;&#10;@app.get(&quot;/&quot;)&#10;async def hello_world():&#10;    return {&quot;message&quot;: &quot;Backend is working!&quot;}&#10;&#10;@app.get(&quot;/weather&quot;)&#10;async def get_weather():&#10;&#10;&#10;    async with httpx.AsyncClient() as client:&#10;        ip_response = await client.get(ipify_api_url)&#10;        ip_response.raise_for_status()&#10;        ip_data = ip_response.json()&#10;        user_ip = ip_data.get(&quot;ip&quot;)&#10;&#10;        weather_url = f&quot;https://api.weatherapi.com/v1/current.json?key={weather_api_key}&amp;q={user_ip}&quot;&#10;        weather_response = await client.get(weather_url)&#10;        weather_response.raise_for_status()&#10;        weather_data = weather_response.json()&#10;        return {&quot;weather&quot;: weather_data}" />
              <option name="updatedContent" value="import httpx  &#10;from fastapi import FastAPI&#10;from dotenv import load_dotenv &#10;from fastapi.middleware.cors import CORSMiddleware &#10;import os &#10;load_dotenv()&#10;&#10;&#10;&#10;app = FastAPI() &#10;app.add_middleware(CORSMiddleware, allow_origins=[&quot;*&quot;], allow_credentials=True, allow_methods=[&quot;*&quot;], allow_headers=[&quot;*&quot;]) # nie do produkcji / wygodne w dev&#10;weather_api_key= os.getenv(&quot;WEATHER_API_KEY&quot;)&#10;ipify_api_url = &quot;https://api.ipify.org?format=json&quot;&#10;&#10;@app.get(&quot;/&quot;)&#10;async def hello_world():&#10;    return {&quot;message&quot;: &quot;Backend is working!&quot;}&#10;&#10;@app.get(&quot;/weather&quot;)&#10;async def get_weather():&#10;&#10;&#10;    async with httpx.AsyncClient() as client:&#10;        ip_response = await client.get(ipify_api_url)&#10;        ip_response.raise_for_status()&#10;        ip_data = ip_response.json()&#10;        user_ip = ip_data.get(&quot;ip&quot;)&#10;&#10;        weather_url = f&quot;https://api.weatherapi.com/v1/current.json?key={weather_api_key}&amp;q={user_ip}&quot;&#10;        weather_response = await client.get(weather_url)&#10;        weather_response.raise_for_status()&#10;        weather_data = weather_response.json()&#10;        return {&quot;weather&quot;: weather_data}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/web/src/components/navbar/Navbar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/web/src/components/navbar/Navbar.tsx" />
              <option name="originalContent" value="import { Sun, Moon } from &quot;lucide-react&quot;;&#10;import { Switch } from &quot;@/components/ui/switch&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import { useState } from &quot;react&quot;;&#10;&#10;&#10;export default function Navbar(){&#10;    const [darkMode, setDarkMode] = useState(false);&#10;    const toggleDarkMode = () =&gt; {&#10;        setDarkMode((prevMode) =&gt; !prevMode);&#10;        document.documentElement.classList.toggle('dark');&#10;    };&#10;&#10;    return (&#10;        &lt;div className={`min-h-screen bg-background transition-colors duration-300 ${darkMode ? 'dark' : ''}`}&gt;&#10;            &lt;div className=&quot;container mx-auto px-4 py-8&quot;&gt;&#10;                {/* Header */}&#10;                &lt;div className=&quot;flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-8&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                            {darkMode ? (&#10;                                &lt;Moon className=&quot;w-8 h-8 text-blue-400&quot;/&gt;&#10;                            ) : (&#10;                                &lt;Sun className=&quot;w-8 h-8 text-yellow-500&quot;/&gt;&#10;                            )}&#10;                            &lt;h1 className=&quot;text-3xl&quot;&gt;Weather Forecast&lt;/h1&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                            &lt;Switch&#10;                                id=&quot;dark-mode&quot;&#10;                                checked={darkMode}&#10;                                onCheckedChange={toggleDarkMode}&#10;                            /&gt;&#10;                            &lt;Label htmlFor=&quot;dark-mode&quot;&gt;Dark Mode&lt;/Label&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;    );&#10;                }" />
              <option name="updatedContent" value="import { Sun, Moon } from &quot;lucide-react&quot;;&#10;import { Switch } from &quot;@/components/ui/switch&quot;;&#10;import { Label } from &quot;@/components/ui/label&quot;;&#10;import { useState } from &quot;react&quot;;&#10;&#10;&#10;export default function Navbar(){&#10;    const [darkMode, setDarkMode] = useState(false);&#10;    const toggleDarkMode = () =&gt; {&#10;        setDarkMode((prevMode) =&gt; !prevMode);&#10;        document.documentElement.classList.toggle('dark');&#10;    };&#10;&#10;    return (&#10;        &lt;div className={`min-h-screen bg-background transition-colors duration-300 ${darkMode ? 'dark' : ''}`}&gt;&#10;            &lt;div className=&quot;container mx-auto px-4 py-8&quot;&gt;&#10;                {/* Header */}&#10;                &lt;div className=&quot;flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-8&quot;&gt;&#10;                    &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                            {darkMode ? (&#10;                                &lt;Moon className=&quot;w-8 h-8 text-blue-400&quot;/&gt;&#10;                            ) : (&#10;                                &lt;Sun className=&quot;w-8 h-8 text-yellow-500&quot;/&gt;&#10;                            )}&#10;                            &lt;h1 className=&quot;text-3xl&quot;&gt;Weather Forecast&lt;/h1&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                            &lt;Switch&#10;                                id=&quot;dark-mode&quot;&#10;                                checked={darkMode}&#10;                                onCheckedChange={toggleDarkMode}&#10;                            /&gt;&#10;                            &lt;Label htmlFor=&quot;dark-mode&quot;&gt;Dark Mode&lt;/Label&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;    );&#10;                }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/web/src/modules/home/Home.page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/web/src/modules/home/Home.page.tsx" />
              <option name="originalContent" value="import { useEffect, useState } from &quot;react&quot;;&#10;import axios from &quot;axios&quot;;&#10;import Navbar from &quot;@/components/navbar/Navbar.tsx&quot;;&#10;import Content from &quot;@/components/Content.tsx&quot;;&#10;import AlertIpAccess from &quot;@/components/AlertIpAccess.tsx&quot;;&#10;&#10;&#10;const HomePage = () =&gt; {&#10;  const [open, setOpen] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    const fetchData = async () =&gt; {&#10;      const response = await axios.get(&#10;        import.meta.env.VITE_API_URL + &quot;/weather&quot;,&#10;      );&#10;      console.log(response.data);&#10;    };&#10;    fetchData();&#10;  }, []);&#10;&#10;  return (&#10;      &lt;&gt;&#10;        &lt;Navbar /&gt;&#10;        &lt;Content onAddLocationClick={() =&gt; setOpen(true)}/&gt;&#10;        &lt;AlertIpAccess open={open} onOpenChange={setOpen}/&gt;&#10;      &lt;/&gt;&#10;  );&#10;};&#10;&#10;&#10;export default HomePage;&#10;" />
              <option name="updatedContent" value="import { useEffect, useState } from &quot;react&quot;;&#10;import axios from &quot;axios&quot;;&#10;import Navbar from &quot;@/components/navbar/Navbar.tsx&quot;;&#10;import Content from &quot;@/components/Content.tsx&quot;;&#10;import AlertIpAccess from &quot;@/components/AlertIpAccess.tsx&quot;;&#10;&#10;&#10;const HomePage = () =&gt; {&#10;  const [open, setOpen] = useState(false);&#10;&#10;  useEffect(() =&gt; {&#10;    const fetchData = async () =&gt; {&#10;      const response = await axios.get(&#10;        import.meta.env.VITE_API_URL + &quot;/weather&quot;,&#10;      );&#10;      console.log(response.data);&#10;    };&#10;    fetchData();&#10;  }, []);&#10;&#10;  return (&#10;      &lt;&gt;&#10;        &lt;Navbar /&gt;&#10;        &lt;Content onAddLocationClick={() =&gt; setOpen(true)}/&gt;&#10;        &lt;AlertIpAccess open={open} onOpenChange={setOpen}/&gt;&#10;      &lt;/&gt;&#10;  );&#10;};&#10;&#10;&#10;export default HomePage;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>