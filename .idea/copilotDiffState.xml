<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/apps/api/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/api/main.py" />
              <option name="originalContent" value="import httpx  &#10;from fastapi import FastAPI&#10;from dotenv import load_dotenv &#10;from fastapi.middleware.cors import CORSMiddleware &#10;import os &#10;load_dotenv()&#10;&#10;&#10;&#10;app = FastAPI() &#10;app.add_middleware(CORSMiddleware, allow_origins=[&quot;*&quot;], allow_credentials=True, allow_methods=[&quot;*&quot;], allow_headers=[&quot;*&quot;]) # nie do produkcji / wygodne w dev&#10;weather_api_key= os.getenv(&quot;WEATHER_API_KEY&quot;)&#10;ipify_api_url = &quot;https://api.ipify.org?format=json&quot;&#10;&#10;@app.get(&quot;/&quot;)&#10;async def hello_world():&#10;    return {&quot;message&quot;: &quot;Backend is working!&quot;}&#10;&#10;@app.get(&quot;/weather&quot;)&#10;async def get_weather():&#10;&#10;&#10;    async with httpx.AsyncClient() as client:&#10;        ip_response = await client.get(ipify_api_url)&#10;        ip_response.raise_for_status()&#10;        ip_data = ip_response.json()&#10;        user_ip = ip_data.get(&quot;ip&quot;)&#10;&#10;        weather_url = f&quot;https://api.weatherapi.com/v1/current.json?key={weather_api_key}&amp;q={user_ip}&quot;&#10;        weather_response = await client.get(weather_url)&#10;        weather_response.raise_for_status()&#10;        weather_data = weather_response.json()&#10;        return {&quot;weather&quot;: weather_data}" />
              <option name="updatedContent" value="import httpx  &#10;from fastapi import FastAPI&#10;from dotenv import load_dotenv &#10;from fastapi.middleware.cors import CORSMiddleware &#10;import os &#10;load_dotenv()&#10;&#10;&#10;&#10;app = FastAPI() &#10;app.add_middleware(CORSMiddleware, allow_origins=[&quot;*&quot;], allow_credentials=True, allow_methods=[&quot;*&quot;], allow_headers=[&quot;*&quot;]) # nie do produkcji / wygodne w dev&#10;weather_api_key= os.getenv(&quot;WEATHER_API_KEY&quot;)&#10;ipify_api_url = &quot;https://api.ipify.org?format=json&quot;&#10;&#10;@app.get(&quot;/&quot;)&#10;async def hello_world():&#10;    return {&quot;message&quot;: &quot;Backend is working!&quot;}&#10;&#10;@app.get(&quot;/weather&quot;)&#10;async def get_weather():&#10;&#10;&#10;    async with httpx.AsyncClient() as client:&#10;        ip_response = await client.get(ipify_api_url)&#10;        ip_response.raise_for_status()&#10;        ip_data = ip_response.json()&#10;        user_ip = ip_data.get(&quot;ip&quot;)&#10;&#10;        weather_url = f&quot;https://api.weatherapi.com/v1/current.json?key={weather_api_key}&amp;q={user_ip}&quot;&#10;        weather_response = await client.get(weather_url)&#10;        weather_response.raise_for_status()&#10;        weather_data = weather_response.json()&#10;        return {&quot;weather&quot;: weather_data}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/web/src/components/AlertIpAccess.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/web/src/components/AlertIpAccess.tsx" />
              <option name="originalContent" value="import {&#10;    AlertDialog,&#10;    AlertDialogAction,&#10;    AlertDialogCancel,&#10;    AlertDialogContent,&#10;    AlertDialogDescription,&#10;    AlertDialogFooter,&#10;    AlertDialogHeader,&#10;    AlertDialogTitle,&#10;} from &quot;@/components/ui/alert-dialog&quot;&#10;&#10;&#10;interface AlertIpAccessProps {&#10;    open?: boolean;&#10;    setAlertOpen?: (open: boolean) =&gt; void;&#10;    onGiveAccess?: () =&gt; void;&#10;}&#10;&#10;export default function AlertIpAccess({open, setAlertOpen, onGiveAccess }: AlertIpAccessProps ) {&#10;    return (&#10;        &lt;AlertDialog open={open} onOpenChange={setAlertOpen}&gt;&#10;            &lt;AlertDialogContent&gt;&#10;                &lt;AlertDialogHeader&gt;&#10;                    &lt;AlertDialogTitle&gt;Do you agree to share your IP&lt;/AlertDialogTitle&gt;&#10;                    &lt;AlertDialogDescription&gt;&#10;                        This action cannot be undone. This will make your IP address visible to&#10;                        us. Are you sure you want to continue?&#10;                    &lt;/AlertDialogDescription&gt;&#10;                &lt;/AlertDialogHeader&gt;&#10;                &lt;AlertDialogFooter&gt;&#10;                    &lt;AlertDialogCancel&gt;Exit&lt;/AlertDialogCancel&gt;&#10;                    &lt;AlertDialogAction onClick={onGiveAccess}&gt;Give Access&lt;/AlertDialogAction&gt;&#10;                &lt;/AlertDialogFooter&gt;&#10;            &lt;/AlertDialogContent&gt;&#10;        &lt;/AlertDialog&gt;&#10;    )&#10;}&#10;//onclick a potem zmiana stanu w home page" />
              <option name="updatedContent" value="import {&#10;    AlertDialog,&#10;    AlertDialogAction,&#10;    AlertDialogCancel,&#10;    AlertDialogContent,&#10;    AlertDialogDescription,&#10;    AlertDialogFooter,&#10;    AlertDialogHeader,&#10;    AlertDialogTitle,&#10;} from &quot;@/components/ui/alert-dialog&quot;&#10;&#10;&#10;interface AlertIpAccessProps {&#10;    open?: boolean;&#10;    setAlertOpen?: (open: boolean) =&gt; void;&#10;    onGiveAccess?: () =&gt; void;&#10;}&#10;&#10;export default function AlertIpAccess({open, setAlertOpen, onGiveAccess }: AlertIpAccessProps ) {&#10;    return (&#10;        &lt;AlertDialog open={open} onOpenChange={setAlertOpen}&gt;&#10;            &lt;AlertDialogContent&gt;&#10;                &lt;AlertDialogHeader&gt;&#10;                    &lt;AlertDialogTitle&gt;Do you agree to share your IP&lt;/AlertDialogTitle&gt;&#10;                    &lt;AlertDialogDescription&gt;&#10;                        This action cannot be undone. This will make your IP address visible to&#10;                        us. Are you sure you want to continue?&#10;                    &lt;/AlertDialogDescription&gt;&#10;                &lt;/AlertDialogHeader&gt;&#10;                &lt;AlertDialogFooter&gt;&#10;                    &lt;AlertDialogCancel&gt;Exit&lt;/AlertDialogCancel&gt;&#10;                    &lt;AlertDialogAction onClick={onGiveAccess}&gt;Give Access&lt;/AlertDialogAction&gt;&#10;                &lt;/AlertDialogFooter&gt;&#10;            &lt;/AlertDialogContent&gt;&#10;        &lt;/AlertDialog&gt;&#10;    )&#10;}&#10;//onclick a potem zmiana stanu w home page" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/apps/web/src/components/Content.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/apps/web/src/components/Content.tsx" />
              <option name="originalContent" value="import { Button } from &quot;@/components/ui/button&quot;&#10;import {Cloud} from &quot;lucide-react&quot;;&#10;import WeatherInfo from &quot;./WeatherInfo&quot;;&#10;&#10;interface ContentProps {&#10;    onAddLocationClick: () =&gt; void;&#10;}&#10;&#10;export default function Content({ onAddLocationClick }: ContentProps) {&#10;    // Teraz Content renderuje WeatherInfo. Stara implementacja zachowana poniżej jako komentarz.&#10;    return &lt;WeatherInfo onAddLocationClick={onAddLocationClick} /&gt;&#10;}&#10;&#10;// Stara implementacja (zakomentowana, można przywrócić jeśli trzeba):&#10;/*&#10;export default function Content({ onAddLocationClick }: ContentProps) {&#10;    return (&#10;        &lt;div className=&quot;flex flex-col items-center justify-center min-h-screen bg-background px-4&quot;&gt;&#10;            &lt;Cloud className=&quot;w-16 h-16 text-muted-foreground mx-auto mb-4&quot;/&gt;&#10;            &lt;Button variant=&quot;outline&quot; onClick = {onAddLocationClick}&gt; Weather Forecast&lt;/Button&gt;&#10;            &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                Give access to your IP to get weather based on your location.&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}&#10;*/" />
              <option name="updatedContent" value="import { Button } from &quot;@/components/ui/button&quot;&#10;import {Cloud} from &quot;lucide-react&quot;;&#10;import WeatherInfo from &quot;./WeatherInfo&quot;;&#10;&#10;interface ContentProps {&#10;    onAddLocationClick: () =&gt; void;&#10;}&#10;&#10;export default function Content({ onAddLocationClick }: ContentProps) {&#10;    // Teraz Content renderuje WeatherInfo. Stara implementacja zachowana poniżej jako komentarz.&#10;    return &lt;WeatherInfo onAddLocationClick={onAddLocationClick} /&gt;&#10;}&#10;&#10;// Stara implementacja (zakomentowana, można przywrócić jeśli trzeba):&#10;/*&#10;export default function Content({ onAddLocationClick }: ContentProps) {&#10;    return (&#10;        &lt;div className=&quot;flex flex-col items-center justify-center min-h-screen bg-background px-4&quot;&gt;&#10;            &lt;Cloud className=&quot;w-16 h-16 text-muted-foreground mx-auto mb-4&quot;/&gt;&#10;            &lt;Button variant=&quot;outline&quot; onClick = {onAddLocationClick}&gt; Weather Forecast&lt;/Button&gt;&#10;            &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                Give access to your IP to get weather based on your location.&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    )&#10;}&#10;*/" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>